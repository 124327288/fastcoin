# errata:
# - A travis bug causes caches to trample eachother when using the same
#   compiler key (which we don't use anyway). This is worked around for now by
#   replacing the "compilers" with a build name prefixed by the no-op ":"
#   command. See: https://github.com/travis-ci/casher/issues/6

os: linux
language: cpp
env:
  global:
    - MAKEJOBS=-j3
    - RUN_TESTS=false
    - CCACHE_SIZE=100M
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out
    #- SDK_URL=https://bitcoincore.org/depends-sources/sdks
    - MODEL=freecoin
    #- SCP_DESTINATION=someone@someone.net:/home/someone/tarballs
    - secure: "KJ0KYZnEHl1mejooQl7VNgR2nbI8WfEfOo1BeZ+JaaXf5Wd7VhXdQ0iyoZITodAbpUMWYCda5k3m5GyABT7fNg8jR6paHAuuur3s2+MUcQPGHMPoVQskKmGDBkn4qJtSiH9oUcn0LNuU6OmYXVaqYRlyG9NrhQgyyhwgkZgPkdc="
    #- SCP_PASSPHRASE="you can NOT known it!"
    - secure: "gTgRRTsgNFH0VvGsFJ9qoMzx5kB6sPdSwssEZJk1SAFEL7lmhCwquymAOK8QouFb9VxJvPenPxK28f/dPSI60/gijNScQBS8YWN5bQdBYncO/n2w93oscRXzEKd4dzwykD4H9rWw6dOmSHi4zaaT8z5rL5IbZbTpIP6j2yLHiX4="
    #- PATCH_PASSPHRASE="very secure passphrase"
    - secure: "c2DLcb/z3YLM45PhzBahbf+buR7keM1+JvcWpSmj4p2JQobH4bERmJY5hff9dGq2TwulijrRmrB/mV7skwWuEVrGZSO/v0c1ENERPh/RjGhG35smVevPBL/itBWNzTnoyLAm4e0th+ps1/FcD1UBP3XRBoeEFO9NluDUSvGavTs="
cache:
  apt: true
  directories:
  - depends/built
  #- depends/sdk-sources
  - $HOME/.ccache
matrix:
  fast_finish: true
  include:
    #- compiler: ": ARM"
    #  env: HOST=arm-linux-gnueabihf PACKAGES="g++-arm-linux-gnueabihf" DEP_OPTS="NO_QT=1" GOAL="install" BITCOIN_CONFIG="--enable-glibc-back-compat"
    - compiler: ": bitcoind"
      env: HOST=x86_64-unknown-linux-gnu PACKAGES="sshpass unzip bc" DEP_OPTS="NO_QT=1 NO_UPNP=1 DEBUG=1" RUN_TESTS=true GOAL="install" BITCOIN_CONFIG="--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER"
    #- compiler: ": No wallet"
    #  env: HOST=x86_64-unknown-linux-gnu DEP_OPTS="NO_WALLET=1" RUN_TESTS=true GOAL="install" BITCOIN_CONFIG="--enable-glibc-back-compat"
    #- compiler: ": 32-bit + dash"
    #  env: HOST=i686-pc-linux-gnu PACKAGES="g++-multilib bc" RUN_TESTS=true GOAL="install" BITCOIN_CONFIG="--enable-glibc-back-compat" USE_SHELL="/bin/dash"
    #- compiler: ": Cross-Mac"
    #  env: HOST=x86_64-apple-darwin11 PACKAGES="gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev" OSX_SDK=10.7 GOAL="deploy"
    #- compiler: ": Win64"
    #  env: HOST=x86_64-w64-mingw32 PACKAGES="nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine bc" RUN_TESTS=true GOAL="deploy"
    #- compiler: ": Win32"
    #  env: HOST=i686-w64-mingw32 PACKAGES="sshpass unzip nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine bc" RUN_TESTS=true GOAL="deploy"
install:
    - if [ -n "$PACKAGES" ]; then travis_retry sudo apt-get update; fi
    - if [ -n "$PACKAGES" ]; then travis_retry sudo apt-get install --no-upgrade -qq $PACKAGES; fi
before_script:
    - unset CC; unset CXX
    #- mkdir -p depends/SDKs depends/sdk-sources
    #- if [ -n "$OSX_SDK" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then wget $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -O depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    #- if [ -n "$OSX_SDK" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS || (echo "Build failure. Verbose build follows." && make -C depends V=1 HOST=$HOST $DEP_OPTS)
script:
    - if [ -n "$USE_SHELL" ]; then export CONFIG_SHELL="$USE_SHELL"; fi
    - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST
    - BITCOIN_CONFIG_ALL="--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib"
    - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE
    - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then export CCACHE_READONLY=1; fi
    - test -n "$USE_SHELL" && eval '"$USE_SHELL" -c "./autogen.sh"' || ./autogen.sh
    - ./configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
    # ### BEGIN ###try to patch info from template, e.g. icons, images, strings, algorithm etc.
    - echo $(ls -l $(which sh))
    - echo $(bash --version)
    - if ! "$TRAVIS_PULL_REQUEST" && "$TRAVIS_SECURE_ENV_VARS" ; then ( COIN_CONFIG_DIR=$(pwd)/model/$MODEL UNZIP_PASSPHRASE=$PATCH_PASSPHRASE bash bash/makecoin.sh ); fi
    # ### DONE  ###
    - make distdir PACKAGE=bitcoin VERSION=$HOST
    - cd bitcoin-$HOST
    - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)
    - make $MAKEJOBS $GOAL || ( echo "Build failure. Verbose build follows." && make $GOAL V=1 ; false )
    - if [ "$RUN_TESTS" = "true" ]; then make check; fi
    - if [ "$RUN_TESTS" = "true" ]; then qa/pull-tester/rpc-tests.sh; fi
after_script:
    - if ! "$TRAVIS_PULL_REQUEST" && "$TRAVIS_SECURE_ENV_VARS" ; then tar czf /tmp/result.tar.gz $BASE_OUTDIR ; sshpass -p "$SCP_PASSPHRASE" scp -o "StrictHostKeyChecking no" /tmp/result.tar.gz "$SCP_DESTINATION" ; rm -rf /tmp/result.tar.gz ; echo "Uploaded to $SCP_DESTINATION done"; fi
